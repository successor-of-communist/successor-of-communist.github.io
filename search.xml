<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Ubuntu 16.04 安装opencv]]></title>
    <url>%2F2018%2F06%2F17%2Fpage_opencv%2F</url>
    <content type="text"><![CDATA[1.去官网下载opencv，在本教程中选用的时opencv3.4.1，其他版本的配置方法异曲同工下载地址,选择sources版本 2.解压下载下来的zip包1unzip opencv-3.4.1.zip 3.进入到解压后的文件包中 4.安装依赖库和cmake ，如果提醒需要apt-get update，那就先sudo su进入root权限，再sudo apt-get update，然后在执行下面命令123sudo apt-get install cmake sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev 5.安装完cmake之后执行命令 ,创建编译文件夹，不创建的会提示fatal:In-source builds are not allowed.12mkdir my_build_dircd my_build_dir 6.cmake一下1cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local .. 注意：如果已经在新的文件夹中编译，但是还会出现之前的报错，把cmakecache.txt删了再编译 期间可能会下载一个东西，等待一会儿就OK 7.执行命令，漫长的编译过程1sudo make 8.执行命令1sudo make install 9.sudo make install 执行完毕后OpenCV编译过程就结束了，接下来就需要配置一些OpenCV的编译环境首先将OpenCV的库添加到路径，从而可以让系统找到1sudo gedit /etc/ld.so.conf.d/opencv.conf 执行此命令后打开的可能是一个空白的文件，不用管，只需要在文件末尾添加 /usr/local/lib 10.执行如下命令使得刚才的配置路径生效1sudo ldconfig 过程中没有问题，有问题的可以看下最下面的参考网址 11.配置bash1sudo gedit /etc/bash.bashrc 在最末尾添加 PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig export PKG_CONFIG_PATH 保存，执行如下命令使得配置生效1source /etc/bash.bashrc 更新1sudo updatedb 12.至此所有的配置都已经完成下面用一个小程序测试一下 找到cd到opencv-3.4.1/samples/cpp/example_cmake目录下我们可以看到这个目录里官方已经给出了一个cmake的example我们可以拿来测试下按顺序执行123cmake .make./opencv_example 即可看到打开了摄像头，在左上角有一个hello opencv即表示配置成功 13.测试随便找个代码试一下如果提示 fatal:core/core.hpp file not find前面加opencv2/ #include &lt;opencv2/core/core.hpp&gt;opencv的头文件都类似 参考地址：https://blog.csdn.net/cocoaqin/article/details/78163171]]></content>
      <tags>
        <tag>opencv</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F06%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[vim+markdown]]></title>
    <url>%2F2018%2F06%2F17%2Fvim_markdown%2F</url>
    <content type="text"><![CDATA[没有vim感觉生活不能自理install三个插件:语法高亮插件vim-markdown实时预览插件markdown-preview.vim可以预览数学公式插件mathjax-support-for-mkdp后两个是在一起的，说明文档写的很清楚 我用的vundle管理vim插件只用添加 1234Plugin 'godlygeek/tabular'Plugin 'plasticboy/vim-markdown'Plugin 'iamcco/mathjax-support-for-mkdp'Plugin 'iamcco/markdown-preview.vim' 然后:PluginInstall OK结束]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>markdown</tag>
        <tag>mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo使用插件支持MathJax]]></title>
    <url>%2F2018%2F06%2F17%2Fpage_hexo_mathjax%2F</url>
    <content type="text"><![CDATA[MathJax是使用LaTeX方式输入数学公式的好工具。Hexo虽然可以直接使用mathjax，但是存在一些不方便之处。使用hexo-math这个插件可以大大方便使用。 在hexo安装目录下执行 1npm install hexo-math --save 然后编辑站点根目录下的_config.yml，添加 123456math: engine: 'mathjax' # or 'katex' mathjax: src: custom_mathjax_source config: # MathJax config 之后进入theme的目录，编辑主题的_config.yml，找到mathjax字段。NexT 5.0.1中默认mathjax是禁用，需要改成 12mathjax: enable: true OK这样就好了]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Canny边缘检测]]></title>
    <url>%2F2018%2F06%2F04%2Fpage_canny%2F</url>
    <content type="text"><![CDATA[参考地址https://blog.csdn.net/dcrmg/article/details/52344902]]></content>
      <categories>
        <category>ComputerVision</category>
      </categories>
      <tags>
        <tag>ComputerVision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04 Hexo配置]]></title>
    <url>%2F2018%2F05%2F31%2Fpage_hexo%2F</url>
    <content type="text"><![CDATA[安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 Wget:1$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。1$ nvm install stable ##安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。1$ npm install -g hexo-cli 初探 Hexo先要初始化一个目录123$ hexo init &lt;filename&gt;$ hexo g$ hexo s //调试 执行后会出现INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 浏览器登录网址就可以看到刚创建的博客 将hexo博客部署到github上申请github帐号创建仓库：yourname.github.ioyourname是你的账户名 修改配置文件blog/_config.yml，修改deploy项（在文件最下面）的内容，如下所示：123456789# Deployment 注释## Docs: https://hexo.io/docs/deployment.htmldeploy: # 类型 type: git # 仓库 repo: git@github.com:yourname/yourname.github.io.git # 分支 branch: master 输入下面的命令将hexo博客部署到github中：123456# 清空静态页面hexo clean# 生成静态页面hexo generate# 部署 hexo deploy next主题配置https://zhuanlan.zhihu.com/p/30836436https://blog.csdn.net/qq_33699981/article/details/72716951]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
